name: Build and Release Electron App

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Node.js and npm
        uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'
          npm-version: '10.2.3'
          
      # 创建独立的工作目录用于服务端构建
      - name: Create Workspace
        shell: bash
        run: |
          mkdir -p workspace
          echo "WORKSPACE_DIR=${{ github.workspace }}/workspace" >> $GITHUB_ENV
          
      # 构建服务端依赖
      - name: Build Server Dependency
        shell: bash
        run: |
          # 创建临时构建目录
          BUILD_DIR="${{ runner.temp }}/server-build"
          mkdir -p "$BUILD_DIR"
          
          echo "Cloning server repository..."
          git clone https://x-access-token:${{ secrets.AUTH_TOKEN }}@github.com/hawkeye-xb/p-pass-file-server.git "$BUILD_DIR"
          cd "$BUILD_DIR"
          
          echo "Installing all dependencies..."
          npm install --no-audit --no-fund --include=dev
          
          echo "Rebuilding native modules..."
          npm rebuild --verbose
          
          echo "Building server..."
          npx cross-env NODE_ENV=production node esbuild.config.js && node copy-node-files.js
          
          echo "Preparing target directory..."
          TARGET_DIR="${{ github.workspace }}/src/server"
          rm -rf "$TARGET_DIR"
          mkdir -p "$TARGET_DIR"
          
          echo "Copying build artifacts..."
          if [ "$RUNNER_OS" == "Windows" ]; then
            # Windows 环境使用 PowerShell 处理路径和复制
            pwsh -Command "Copy-Item -Path '$BUILD_DIR/dist/*' -Destination '$TARGET_DIR' -Recurse -Force"
          else
            # Unix 环境使用 cp 命令
            cp -R "$BUILD_DIR/dist/"* "$TARGET_DIR/"
          fi
          
          # 验证文件复制
          if [ ! "$(ls -A "$TARGET_DIR")" ]; then
            echo "Error: Target directory is empty after copy"
            exit 1
          fi
        env:
          GIT_TERMINAL_PROMPT: 0
          CI: true
          NODE_ENV: production

      # 上传构建产物
      - name: Generate Release Notes
        id: release_notes
        run: |
          # 获取最新tag的信息
          TAG_NAME=${GITHUB_REF#refs/tags/}
          
          # 获取tag信息和提交信息
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # 生成变更日志
          CHANGELOG=$(git log --pretty=format:"- %s%n  %b" $(git describe --tags --abbrev=0 HEAD^)..HEAD)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            release/*.exe
            release/*.dmg
            release/*.AppImage
          name: Release ${{ steps.release_notes.outputs.tag_name }}
          body: |
            ## 更新内容
            ${{ steps.release_notes.outputs.changelog }}
            
            ## 支持平台
            - Windows x64
            - macOS Intel/Apple Silicon
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}

      # 构建失败时的清理工作
      - name: Cleanup on failure
        if: failure()
        shell: bash
        run: |
          rm -rf ${{ env.WORKSPACE_DIR }}
          rm -rf src/server/*